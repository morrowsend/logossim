{"version":3,"sources":["../webpack/bootstrap","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../core/Simulation/mesh.js","../../core/Simulation/deserialize.js","../../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../core/Simulation/utils.js","../../core/Simulation/simulation.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperty","obj","configurable","writable","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","_arrayLikeToArray","arr","len","arr2","Array","_unsupportedIterableToArray","minLen","toString","slice","constructor","from","test","_slicedToArray","isArray","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","TypeError","_defineProperties","props","descriptor","_toConsumableArray","iter","findMeshes","allLinks","findLinkById","id","find","findInputs","meshLinks","map","link","port","input","findOutputs","meshes","isBifurcation","mainLink","mesh","addRecursively","bifurcation","bifurcations","links","inputs","outputs","GenericComponent","properties","methods","instance","Constructor","entries","method","this","initialize","configurations","protoProps","staticProps","ports","output","values","type","previous","current","error","risingEdge","fallingEdge","meta","setValues","every","portName","customPropertyNames","includes","JSON","parse","stringify","reduce","event","MessageEvent","data","command","emitted","self","dispatchEvent","frequency","waveform","audioCount","AUDIO_ID","postMessage","payload","toLowerCase","play","pause","setFrequency","freq","setWaveform","wf","deserializeMethod","model","fromEntries","stringFn","Function","deserialize","serialized","models","deserializeModels","components","component","MAX_VALUE","1","2","4","8","16","adjustValueToBits","dataBits","allBitsSet","mask","isValueValid","getComponent","circuit","appendComponentDiff","diff","getProperties","emitQueue","stepQueue","workInterval","addEventListener","diagram","setInputValues","setOutputValues","diffLinks","flat","diffComponents","onSimulationStart","executeNextEmitted","setInterval","onSimulationPause","clearInterval","onSimulationStop","setTimeout","firstOfCycle","firstOfSimulation","shift","emitter","portValue","bits","getOutputPort","propagate","executeNextStep","result","item","isInputValid","stepError","step","hasOutputChanged","some","meshInput","componentId","getAffectedMeshes","meshValue","allInputValues","portInfo","getMeshInputValue","Set","meshOutput","portsWithNewValue"],"mappings":"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","file":"SimulationWorker.2ceaba79c0a6339a281d.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://renato-bohler.github.io/logossim/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","/**\n * A \"mesh\" is a set of links that are connected to each other.\n *\n * (if there's a better technical name for this please let me know :P)\n *\n * This function receives all links and returns every mesh found,\n * containing the id of each link that makes part of it, as well as\n * a list of all input and output ports that those links connects to.\n *\n * The implementation is basically a DFS (depth first search) executed\n * on every link on the circuit that is not a bifurcation.\n */\nconst findMeshes = allLinks => {\n  // Auxiliary functions\n  const findLinkById = id => allLinks.find(l => id === l.id);\n\n  const addRecursively = (link, mesh) => {\n    if (!link || link.id in mesh) return;\n\n    // eslint-disable-next-line no-param-reassign\n    mesh[link.id] = true;\n\n    addRecursively(findLinkById(link.bifurcation.source), mesh);\n    addRecursively(findLinkById(link.bifurcation.target), mesh);\n    link.bifurcations.forEach(bifurcation =>\n      addRecursively(findLinkById(bifurcation), mesh),\n    );\n  };\n\n  // Output ports are inputs in the mesh's perspective\n  const findInputs = meshLinks =>\n    [\n      ...meshLinks.map(link => findLinkById(link).source),\n      ...meshLinks.map(link => findLinkById(link).target),\n    ].filter(port => port && !port.input);\n\n  // Input ports are outputs in the mesh's perspective\n  const findOutputs = meshLinks =>\n    [\n      ...meshLinks.map(link => findLinkById(link).source),\n      ...meshLinks.map(link => findLinkById(link).target),\n    ].filter(port => port && port.input);\n\n  // Start with no meshes\n  const meshes = [];\n\n  // For each link that is not a bifurcation\n  allLinks\n    .filter(link => !link.isBifurcation)\n    .forEach(mainLink => {\n      // If this link is already on a mesh, there's nothing to do\n      if (meshes.find(mesh => mainLink.id in mesh)) return;\n\n      // Otherwise, create a new mesh and recursively explore it\n      const mesh = {};\n      addRecursively(mainLink, mesh, allLinks);\n      meshes.push(mesh);\n    });\n\n  return meshes\n    .map(mesh => Object.keys(mesh))\n    .map(meshLinks => ({\n      links: meshLinks,\n      inputs: findInputs(meshLinks),\n      outputs: findOutputs(meshLinks),\n    }));\n};\n\nexport default findMeshes;\n","/**\n * SimulationWorker receives all components properties and methods\n * serialized. For that reason, we need to deserialize them before\n * executing the simulation thread.\n */\n\n/* ---------------------------------------------------------------- */\nimport findMeshes from './mesh';\n\n/**\n * This class represents a generic component. It receives deserialized\n * properties and methods in its constructor and it's used to handle\n * simulation logic.\n */\nexport class GenericComponent {\n  constructor(properties, methods) {\n    Object.entries(properties).forEach(([key, value]) => {\n      this[key] = value;\n    });\n\n    Object.entries(methods).forEach(([name, method]) => {\n      this[name] = method.bind(this);\n    });\n\n    this.initialize(properties.configurations);\n  }\n\n  getInputPort(name) {\n    return this.ports.input.find(port => port.name === name);\n  }\n\n  getOutputPort(name) {\n    return this.ports.output.find(port => port.name === name);\n  }\n\n  setValues(values, type) {\n    this.ports[type] = this.ports[type].map(port => {\n      const previous = port.value;\n\n      let current = previous;\n      let error = false;\n      if (values[port.name] !== undefined) {\n        current = values[port.name];\n        if (typeof current === 'number') {\n          current = values[port.name];\n        } else {\n          error = true;\n        }\n      }\n\n      const risingEdge = !error && previous < current;\n      const fallingEdge = !error && previous > current;\n\n      return {\n        ...port,\n        value: current,\n        meta: {\n          previous,\n          risingEdge,\n          fallingEdge,\n        },\n      };\n    });\n  }\n\n  setInputValues(values) {\n    this.setValues(values, 'input');\n  }\n\n  setOutputValues(values) {\n    this.setValues(values, 'output');\n  }\n\n  hasOutputChanged(values) {\n    return !Object.keys(values).every(\n      portName =>\n        values[portName] ===\n        this.ports.output.find(output => output.name === portName)\n          .value,\n    );\n  }\n\n  getProperties() {\n    const customPropertyNames = Object.keys(this).filter(\n      key =>\n        !['id', 'initialize', 'configurations', 'ports'].includes(\n          key,\n        ),\n    );\n\n    return JSON.parse(\n      JSON.stringify(\n        customPropertyNames\n          .filter(property => typeof this[property] !== 'function')\n          .reduce(\n            (obj, property) => ({\n              ...obj,\n              [property]: this[property],\n            }),\n            {},\n          ),\n      ),\n    );\n  }\n\n  // Defaults\n  onSimulationStart() {}\n\n  onSimulationPause() {}\n\n  onSimulationStop() {}\n\n  step() {\n    return {};\n  }\n\n  stepError() {\n    return this.ports.output.reduce(\n      (obj, port) => ({ ...obj, [port.name]: 'error' }),\n      {},\n    );\n  }\n\n  emit(value) {\n    const event = new MessageEvent('message', {\n      data: {\n        command: 'emit',\n        emitted: { from: this.id, value },\n      },\n    });\n\n    // eslint-disable-next-line no-restricted-globals\n    self.dispatchEvent(event);\n  }\n\n  // Diagram stubs\n  addInputPort() {}\n\n  addOutputPort() {}\n\n  removePort() {}\n\n  // Functionality that requires calling main thread\n  createAudio(frequency, waveform) {\n    if (!this.audioCount) {\n      this.audioCount = 0;\n    }\n\n    const AUDIO_ID = `${this.audioCount}-${this.id}`;\n    this.audioCount += 1;\n\n    postMessage({\n      type: 'audio',\n      payload: {\n        command: 'create',\n        id: AUDIO_ID,\n        frequency,\n        waveform: waveform.toLowerCase(),\n      },\n    });\n\n    const play = () =>\n      postMessage({\n        type: 'audio',\n        payload: {\n          command: 'play',\n          id: AUDIO_ID,\n        },\n      });\n\n    const pause = () =>\n      postMessage({\n        type: 'audio',\n        payload: { command: 'pause', id: AUDIO_ID },\n      });\n\n    const setFrequency = freq =>\n      postMessage({\n        type: 'audio',\n        payload: {\n          command: 'setFrequency',\n          id: AUDIO_ID,\n          frequency: freq,\n        },\n      });\n\n    const setWaveform = wf =>\n      postMessage({\n        type: 'audio',\n        payload: {\n          command: 'setWaveform',\n          id: AUDIO_ID,\n          waveform: wf,\n        },\n      });\n\n    return {\n      play,\n      pause,\n      setFrequency,\n      setWaveform,\n    };\n  }\n}\n\n/**\n * Converts string representing functions to actual functions in given\n * model.\n */\nconst deserializeMethod = model =>\n  Object.fromEntries(\n    Object.entries(model.methods).map(([key, stringFn]) => [\n      key,\n      // eslint-disable-next-line no-new-func\n      new Function(\n        `return ${\n          /**\n           * We need to add the `function` token when on development\n           * environment.\n           */\n          process.env.NODE_ENV === 'development' ? 'function ' : ''\n        }${stringFn}`,\n      )(),\n    ]),\n  );\n\nconst deserializeModels = models =>\n  models\n    .map(model => ({\n      ...model,\n      methods: deserializeMethod(model),\n    }))\n    .reduce(\n      (obj, model) => ({\n        ...obj,\n        [model.type]: model.methods,\n      }),\n      {},\n    );\n\n/**\n * Deserialize a given diagram (serialized), generating\n * `GenericComponent` instances with its given methods and properties.\n */\nconst deserialize = serialized => {\n  const models = deserializeModels(serialized.models);\n\n  return {\n    components: serialized.components.map(\n      component =>\n        new GenericComponent(\n          {\n            ...component.properties,\n            id: component.id,\n            configurations: component.configurations,\n            ports: {\n              input: component.ports\n                .filter(port => port.input)\n                .map(port => ({\n                  ...port,\n                  value: 0,\n                })),\n              output: component.ports\n                .filter(port => !port.input)\n                .map(port => ({\n                  ...port,\n                  value: 0,\n                })),\n            },\n          },\n          models[component.type],\n        ),\n    ),\n    meshes: findMeshes(serialized.links),\n  };\n};\n\nexport default deserialize;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","/* eslint-disable no-restricted-globals */\nexport const MIN_VALUE = 0;\nexport const MAX_VALUE = {\n  1: 0b1,\n  2: 0b11,\n  4: 0b1111,\n  8: 0b1111_1111,\n  16: 0b1111_1111_1111_1111,\n};\n\nexport const adjustValueToBits = (value, dataBits = 1) => {\n  const allBitsSet = 0b1111_1111_1111_1111_1111_1111_1111_1111;\n  const mask = allBitsSet >>> (32 - dataBits);\n\n  return value & mask;\n};\n\nexport const isValueValid = (value, dataBits = 1) =>\n  value === null ||\n  (value >= MIN_VALUE && value <= MAX_VALUE[dataBits]);\n\nexport const isInputValid = input =>\n  input.every(item => isValueValid(item.value, item.bits));\n\nexport const getCleanDiff = () => ({\n  components: {},\n  links: {},\n});\n\nexport const getComponent = id => {\n  if (!self.circuit) return null;\n\n  return (\n    self.circuit.components.find(component => component.id === id) ||\n    null\n  );\n};\n\n/**\n * Find all meshes that are affected by an emitted change.\n */\nexport const getAffectedMeshes = emitted =>\n  self.circuit.meshes.filter(mesh =>\n    mesh.inputs.some(\n      meshInput =>\n        emitted.from.id === meshInput.componentId &&\n        Object.keys(emitted.value).includes(meshInput.name),\n    ),\n  );\n\n/**\n * Finds all components that are connected on a given mesh's output.\n */\nexport const getMeshOutputComponents = mesh =>\n  [\n    ...new Set(\n      mesh.outputs.map(meshOutput => meshOutput.componentId),\n    ),\n  ].map(componentId => getComponent(componentId));\n\n/**\n * Determines the mesh input value.\n */\nexport const getMeshInputValue = mesh => {\n  const allInputValues = mesh.inputs\n    .map(portInfo => {\n      const component = getComponent(portInfo.componentId);\n\n      /**\n       * From the mesh's perspective, a component's output port is an\n       * input.\n       */\n      const port = component.getOutputPort(portInfo.name);\n\n      return port ? port.value : null;\n    })\n    .filter(value => value !== null);\n\n  // A mesh input is coherent if all of its inputs has the same value\n  const isCoherent = allInputValues.every(\n    (value, i, values) => value === values[0],\n  );\n\n  return isCoherent ? allInputValues[0] : 'error';\n};\n\n/**\n * Initialize all links and ports with the value 0.\n */\nexport const initializeDiffAndValues = () => {\n  self.circuit.components.forEach(component => {\n    component.setInputValues(\n      Object.fromEntries(\n        component.ports.input.map(port => [port.id, 0]),\n      ),\n    );\n    component.setOutputValues(\n      Object.fromEntries(\n        component.ports.output.map(port => [port.id, 0]),\n      ),\n    );\n  });\n\n  const diffLinks = self.circuit.meshes\n    .map(mesh => mesh.links)\n    .flat()\n    .reduce((obj, link) => ({ ...obj, [link]: 0 }), {});\n\n  const diffComponents = Object.fromEntries(\n    self.circuit.components.map(component => [\n      component.id,\n      {\n        output: Object.fromEntries(\n          [\n            ...component.ports.input,\n            ...component.ports.output,\n          ].map(port => [port.name, 0]),\n        ),\n        properties: component.getProperties(),\n      },\n    ]),\n  );\n\n  postMessage({\n    type: 'diff',\n    payload: { links: diffLinks, components: diffComponents },\n  });\n};\n\nexport const appendComponentDiff = (component, output) => {\n  if (!self.diff.components[component.id]) {\n    self.diff.components[component.id] = {\n      output: {},\n      properties: {},\n    };\n  }\n  self.diff.components[component.id] = {\n    ...self.diff.components[component.id],\n    output,\n    properties: component.getProperties(),\n  };\n};\n","/**\n * This code runs the simulation workload on a Web Worker thread, to\n * avoid blocking the UI (main) thread.\n *\n * Whenever a component executes `emit`, its changes are pushed to\n * `emitQueue`, which will be handled by the `executeNextEmitted`\n * function.\n *\n * Every component that is affected by this emitted event is pushed to\n * the `stepQueue`, which will be handled recursively by the\n * `executeNextStep` function.\n */\n\n/* ---------------------------------------------------------------- */\n\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-use-before-define */\nimport deserialize from './deserialize';\nimport {\n  getCleanDiff,\n  appendComponentDiff,\n  initializeDiffAndValues,\n  isInputValid,\n  isValueValid,\n  getComponent,\n  getAffectedMeshes,\n  getMeshInputValue,\n  getMeshOutputComponents,\n  adjustValueToBits,\n} from './utils';\n\n/**\n * Worker states\n */\nself.circuit = null; // circuit information\nself.diff = null; // diff to send back to the app\nself.emitQueue = []; // emitted changes that are pending\nself.stepQueue = []; // components that are pending propagation\nself.workInterval = null; // main execution interval\n\n/**\n * Worker message handling\n */\nself.addEventListener(\n  'message',\n  ({ data: { command, diagram, emitted } }) => {\n    switch (command) {\n      /**\n       * START\n       */\n      case 'start':\n        if (diagram !== undefined) {\n          self.circuit = deserialize(diagram);\n          self.diff = getCleanDiff();\n          initializeDiffAndValues();\n        }\n\n        self.circuit.components.forEach(component =>\n          component.onSimulationStart(),\n        );\n\n        // Main workload\n        executeNextEmitted(true, true);\n        self.workInterval = setInterval(executeNextEmitted);\n        break;\n\n      /**\n       * PAUSE\n       */\n      case 'pause':\n        self.circuit.components.forEach(component =>\n          component.onSimulationPause(),\n        );\n        clearInterval(self.workInterval);\n        break;\n\n      /**\n       * STOP\n       */\n      case 'stop':\n        self.circuit.components.forEach(component =>\n          component.onSimulationStop(),\n        );\n        clearInterval(self.workInterval);\n        setTimeout(() => {\n          postMessage({ type: 'clear' });\n          self.circuit = null;\n          self.diff = null;\n          self.emitQueue = [];\n          self.stepQueue = [];\n        });\n        break;\n\n      /**\n       * EMIT\n       */\n      case 'emit':\n        if (self.circuit)\n          self.emitQueue.push({\n            ...emitted,\n            from: getComponent(emitted.from),\n          });\n        break;\n\n      default:\n        break;\n    }\n  },\n);\n\n/**\n * Handles the next emitted event on the emit queue and propagates it.\n */\nconst executeNextEmitted = (\n  firstOfCycle = true,\n  firstOfSimulation = false,\n) => {\n  if (!self.circuit) return;\n\n  const emitted = self.emitQueue.shift();\n  if (!emitted) return;\n\n  const emitter = emitted.from;\n\n  emitted.value = Object.fromEntries(\n    Object.entries(emitted.value).map(([portName, portValue]) => {\n      const { bits } = emitter.getOutputPort(portName);\n      const value = adjustValueToBits(portValue, bits);\n\n      return [portName, isValueValid(value, bits) ? value : 'error'];\n    }),\n  );\n  emitter.setOutputValues(emitted.value);\n\n  appendComponentDiff(emitter, emitted.value);\n  propagate(emitted);\n  executeNextStep(firstOfSimulation);\n\n  executeNextEmitted(false);\n\n  if (firstOfCycle) {\n    postMessage({ type: 'diff', payload: self.diff });\n    self.diff = getCleanDiff();\n  }\n};\n\n/**\n * Executes a step on the next component affected by the emitted\n * change that is being currently handled. Propagates this component's\n * change forward.\n */\nconst executeNextStep = (firstOfSimulation = false) => {\n  const component = self.stepQueue.shift();\n  if (!component) return;\n\n  const input = component.ports.input.reduce(\n    (obj, port) => ({ ...obj, [port.name]: port.value }),\n    {},\n  );\n  const meta = component.ports.input.reduce(\n    (obj, port) => ({ ...obj, [port.name]: port.meta }),\n    {},\n  );\n\n  let result = {};\n  if (isInputValid(component.ports.input)) {\n    result = component.step(input, meta);\n    result = Object.fromEntries(\n      Object.entries(result || {}).map(([portName, portValue]) => {\n        const { bits } = component.getOutputPort(portName);\n        const value = adjustValueToBits(portValue, bits);\n        return [portName, value];\n      }),\n    );\n  } else {\n    result = component.stepError(input, meta);\n  }\n\n  if (!result) return;\n\n  const output = Object.fromEntries(\n    Object.entries(result).filter(([portName]) =>\n      component.getOutputPort(portName),\n    ),\n  );\n\n  if (firstOfSimulation || component.hasOutputChanged(output)) {\n    component.setOutputValues(output);\n    appendComponentDiff(component, output);\n    propagate({ from: component, value: output });\n  }\n\n  executeNextStep();\n};\n\n/**\n * Propagates a change on a component to all components connected to\n * its output.\n */\nconst propagate = emitted => {\n  const affectedMeshes = getAffectedMeshes(emitted);\n  affectedMeshes.forEach(mesh => {\n    const meshValue = getMeshInputValue(mesh);\n    mesh.links.forEach(link => {\n      self.diff.links[link] = meshValue;\n    });\n\n    const connectedComponents = getMeshOutputComponents(mesh);\n    connectedComponents.forEach(component => {\n      const portsConnectedToMesh = mesh.outputs\n        .filter(meshOutput => meshOutput.componentId === component.id)\n        .map(meshOutput => meshOutput.name);\n\n      const portsWithNewValue = portsConnectedToMesh.reduce(\n        (obj, portName) => ({ ...obj, [portName]: meshValue }),\n        {},\n      );\n\n      component.setInputValues(portsWithNewValue);\n\n      appendComponentDiff(component, portsWithNewValue);\n\n      self.stepQueue.push(component);\n    });\n  });\n};\n"],"sourceRoot":""}